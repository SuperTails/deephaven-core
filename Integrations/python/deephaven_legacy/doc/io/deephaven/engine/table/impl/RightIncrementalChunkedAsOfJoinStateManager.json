{
 "className": "io.deephaven.engine.table.impl.RightIncrementalChunkedAsOfJoinStateManager",
 "methods": {
  "buildAdditions": ":param isLeftSide: boolean\n:param additions: io.deephaven.engine.rowset.RowSet\n:param sources: io.deephaven.engine.table.ColumnSource<?>[]\n:param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param sequentialBuilders: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSetBuilderSequential>\n:return: int",
  "buildFromLeftSide": ":param leftIndex: io.deephaven.engine.rowset.RowSequence\n:param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:return: int",
  "buildFromRightSide": ":param rightIndex: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param usedSlots: int\n:return: int",
  "doRehash": ":param bc: io.deephaven.engine.table.impl.RightIncrementalChunkedAsOfJoinStateManager.BuildContext\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource",
  "gatherModifications": ":param restampAdditions: io.deephaven.engine.rowset.RowSet\n:param sources: io.deephaven.engine.table.ColumnSource<?>[]\n:param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param sequentialBuilders: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSetBuilderSequential>\n:return: int",
  "gatherShiftIndex": ":param restampAdditions: io.deephaven.engine.rowset.RowSet\n:param sources: io.deephaven.engine.table.ColumnSource<?>[]\n:param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param sequentialBuilders: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSetBuilderSequential>\n:return: int",
  "getAndClearLeftIndex": "When we get the left RowSet out of our source (after a build or probe); we do it by pulling a sequential builder\n and then calling build().  We also null out the value in the column source, thus freeing the builder's\n memory.\n\n This also results in clearing out the left hand side of the table between each probe phase for the\n left refreshing case.\n\n:param slot: (long) - the slot in the table (either positive for a main slot, or negative for overflow)\n:return: (io.deephaven.engine.rowset.WritableRowSet) the WritableRowSet for this slot",
  "getLeftIndex": ":param slot: long\n:return: io.deephaven.engine.rowset.WritableRowSet",
  "getLeftSsa": "*Overload 1*  \n  :param slot: long\n  :return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray\n  \n*Overload 2*  \n  :param slot: long\n  :param ssaFactory: java.util.function.Function<io.deephaven.engine.rowset.RowSet,io.deephaven.engine.table.impl.ssa.SegmentedSortedArray>\n  :return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray",
  "getLeftSsaOrIndex": ":param slot: long\n:param indexOutput: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.engine.rowset.WritableRowSet>\n:return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray",
  "getOverflowSize": ":return: int",
  "getRightIndex": ":param slot: long\n:return: io.deephaven.engine.rowset.WritableRowSet",
  "getRightSsa": "*Overload 1*  \n  :param slot: long\n  :param ssaFactory: java.util.function.Function<io.deephaven.engine.rowset.RowSet,io.deephaven.engine.table.impl.ssa.SegmentedSortedArray>\n  :return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray\n  \n*Overload 2*  \n  :param slot: long\n  :return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray",
  "getRightSsaOrIndex": ":param slot: long\n:param indexOutput: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.engine.rowset.WritableRowSet>\n:return: io.deephaven.engine.table.impl.ssa.SegmentedSortedArray",
  "getState": ":param slot: long\n:return: byte",
  "getTableSize": ":return: int",
  "makeBuildContext": ":param buildSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param maxSize: long\n:return: io.deephaven.engine.table.impl.RightIncrementalChunkedAsOfJoinStateManager.BuildContext",
  "makeProbeContext": ":param probeSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param maxSize: long\n:return: io.deephaven.engine.table.impl.RightIncrementalChunkedAsOfJoinStateManager.ProbeContext",
  "markForRemoval": ":param restampRemovals: io.deephaven.engine.rowset.RowSet\n:param sources: io.deephaven.engine.table.ColumnSource<?>[]\n:param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param sequentialBuilders: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSetBuilderSequential>\n:return: int",
  "probeAdditions": ":param restampAdditions: io.deephaven.engine.rowset.RowSet\n:param sources: io.deephaven.engine.table.ColumnSource<?>[]\n:param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param sequentialBuilders: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSetBuilderSequential>\n:return: int",
  "probeRightInitial": ":param rightIndex: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]",
  "rehashRequired": ":return: boolean",
  "setLeftIndex": ":param slot: long\n:param rowSet: io.deephaven.engine.rowset.RowSet",
  "setRightIndex": ":param slot: long\n:param rowSet: io.deephaven.engine.rowset.RowSet"
 },
 "path": "io.deephaven.engine.table.impl.RightIncrementalChunkedAsOfJoinStateManager",
 "typeName": "class"
}