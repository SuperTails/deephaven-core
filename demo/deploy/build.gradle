import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'io.deephaven.quarkus'
}

evaluationDependsOn ':demo-server'
evaluationDependsOn ':demo-web'

dependencies {
    implementation project(':demo-controller')
    implementation project(':demo-gcloud')

    implementation 'commons-io:commons-io'
}

String grpcApiRepository = project.property('grpcApiRepository')
String grpcApiTag = project.ext.machineVersion

String webRepository = project.property('webRepository')
String webTag = project.ext.machineVersion

def tagDemoWorkerTask = tasks.register('tagDemoWorker', DockerTagImage) {
    DockerTagImage t ->
        def demoGrpcApi = project(':demo-server')
        t.imageId.set demoGrpcApi.property('image') as String
        t.repository.set grpcApiRepository
        t.tag.set grpcApiTag
        t.force.set true
        t.dependsOn demoGrpcApi.tasks.findByName('buildImage')
}

def tagWebTask = tasks.register('tagWeb', DockerTagImage) {
    DockerTagImage t ->
        def demoWeb = project(':demo-web')
        t.imageId.set demoWeb.property('image') as String
        t.repository.set webRepository
        t.tag.set webTag
        t.force.set true
        t.dependsOn demoWeb.tasks.findByName('buildImage')
}

def tagAll = tasks.register('tagAll') {
    it.dependsOn tagDemoWorkerTask, tagWebTask
}

def untagDemoWorker = tasks.register('untagDemoWorker', DockerRemoveImage) {
    it.imageId.set "${grpcApiRepository}:${grpcApiTag}"
    it.onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
    }
}

def untagWeb = tasks.register('untagWeb', DockerRemoveImage) {
    it.imageId.set "${webRepository}:${webTag}"
    it.onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
    }
}

tasks.register('cleanDocker') {
    it.dependsOn untagDemoWorker, untagWeb
}

def pushAllTask = tasks.register('pushAll', DockerPushImage) {
    DockerPushImage p ->
        p.inputs.property("version", project.ext.machineVersion ?: version)
        p.inputs.property("serverType", findProperty('serverType') ?: '')
        p.images.set([
                "${grpcApiRepository}:${grpcApiTag}",
                "${webRepository}:${webTag}",
        ] as Set)
        p.dependsOn tagAll
}

tasks.register('deployDemo', JavaExec) {
    JavaExec exe ->
        exe.group '~Deephaven Demo'
        exe.description """Deploy a new production controller machine

URL will be https://controller-0-1-2.demo.deephaven.app, where 0-1-2 is your gradle version.

Pass -PworkerOnly=true to only rebuild a worker image
Pass -Pforce=true to forcibly overwrite worker/controller images and rebuild a controller
DO NOT USE -Pforce=true for a currently deployed production version.

It is up to you to update DNS for demo.deephaven.app to promote a controller.
Change the A record to point to the IP of your controller (dig +short controller-1-2-3.demo.deephaven.app):
https://console.cloud.google.com/net-services/dns/zones/deephaven-app/rrsets/demo.deephaven.app./A/view?project=deephaven-oss
Test the controller by visiting its URL _before_ you promote it.
It can take a minute for new machines, as non-leader controllers do not pre-allocate workers.

You should ssh into the controller and monitor the logs:
ssh controller-1-2-3.demo.deephaven.app
cd /dh ; sudo docker-compose logs -f

Make sure to turn off the old controller once new controller logs report that it is the leader.
https://console.cloud.google.com/compute/instances?project=deephaven-oss
(old controllers won't touch newer machines, but it's wasteful to leave them running).
"""
        exe.dependsOn(pushAllTask, ':demo-controller:quarkusBuild')
        exe.main('io.deephaven.demo.deploy.ImageDeployer')
        exe.classpath(sourceSets.main.runtimeClasspath)
        exe.systemProperty('deployImage', 'true')
        exe.systemProperty('useImages', 'true')
        exe.systemProperty('dh-version', version)
        // workerOnly for deployDemo defaults to false, so we check for explicit true conditions only:
        exe.systemProperty('workerOnly', "true" == findProperty('workerOnly') || "1" == findProperty("wO"))
        exe.systemProperty('force', "true" == findProperty('force'))
}

tasks.register('deployMachine', JavaExec) {
    JavaExec exe ->
        exe.group '~Deephaven Demo'
        List<String> options = new File(rootDir, "docker/server/src/main")
                .listFiles({ it.name.startsWith('server-')} as FileFilter)
                .collect({ it.name.substring('server-'.length())})
        exe.description """Create a new long-lived worker machine.

[Required] -Phostname=name-of-machine URL will be name-of-machine.demo.deephaven.app
[Optional] -PserverType= One of ${options.join(", ")} or empty string
The default -PserverType matches production, -all-ai, which is very large and slow to build/rebuild.
You should pick a slimmer image, -PserverType= if you don't need any extra python frameworks.

Pass -PrebuildWorker=true to delete and recreate the worker (mostly just needed to test install scripts)
"""
        exe.dependsOn(pushAllTask, ':demo-controller:quarkusBuild')
        String machineName = findProperty("hostname")
        if (!machineName) {
            exe.doFirst {
                throw new IllegalStateException("Cannot run $exe.path without passing -Phostname=my-machine-name")
            }
            logger.info("No -Phostname found, not configuring $exe.path")
            return
        }
        exe.main('io.deephaven.demo.deploy.ImageDeployer')
        exe.args("--worker", machineName)
        exe.classpath(sourceSets.main.runtimeClasspath)
        exe.systemProperty('deployImage', 'false')
        // workerOnly for deployMachine defaults to true, so we check for explicit false conditions only:
        exe.systemProperty('workerOnly', "false" == findProperty('workerOnly') || "0" == findProperty("wO"))
        boolean force = "true" == findProperty('force')
        exe.systemProperty('force', force)
        exe.systemProperty('rebuildWorker', findProperty('rebuildWorker') ?: force)
        exe.systemProperty('dh-version', project.ext.machineVersion)
        // we still want to use our base image snapshot... if it exists...
        exe.systemProperty('DH_SNAPSHOT_NAME', "deephaven-app-${version.replaceAll("[.]", "-")}")
        exe.systemProperty('useImages', 'false')
        logger.quiet "Setting machine {} to use version {}", machineName, project.ext.machineVersion
}
