####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./gradlew build
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/demo-server-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 7117:7117 quarkus/demo-server-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005) like this :  EXPOSE 7117 5005
#
# Then run the container using :
#
# docker run -i --rm -p 7117:7117 -p 5005:5005 -e JAVA_ENABLE_DEBUG="true" quarkus/demo-server-jvm
#
###
# We'll use a FROM with as so we can COPY --from=grpcurl
FROM fullstorydev/grpcurl:latest as grpcurl

# New FROM to start the final image
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4

MAINTAINER Deephaven Data Labs

COPY --from=grpcurl /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=grpcurl /bin/grpcurl /bin/grpcurl
# RUN addgroup -S grpcurl && adduser -S grpcurl -G grpcurl

ARG JAVA_PACKAGE=java-11-openjdk-headless
ARG RUN_JAVA_VERSION=1.3.8
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'
# Install java and the run-java script
# Also set up permissions for user `1001`
RUN microdnf install  \
      curl  \
      tar  \
      which  \
      python2  \
      gzip \
      bash  \
      hostname  \
      openssl  \
      gcc \
      git \
      gnupg \
      bind-utils \
      ca-certificates ${JAVA_PACKAGE} \
    && microdnf update \
    && microdnf clean all \
    && mkdir /deployments \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown 1001:root /deployments \
    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \
    && chown 1001 /deployments/run-java.sh \
    && chmod 540 /deployments/run-java.sh \
    && echo "securerandom.source=file:/dev/urandom" >> /etc/alternatives/jre/conf/security/java.security

RUN curl -sSL https://sdk.cloud.google.com | bash

ENV PATH $PATH:/root/google-cloud-sdk/bin
ENV CLOUDSDK_CONFIG=/root/.config
# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.
ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Dquarkus.log.level=DEBUG -Dquarkus.http.port=7117 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
RUN echo " \
CLOUDSDK_CONFIG=/root/.config/gcloud \
" > /etc/environment ;

# We make distinct layers here so if there are application changes the library layers can be re-used
COPY --chown=1001 build/quarkus-app/lib/ /deployments/lib/
COPY --chown=1001 build/quarkus-app/*.jar /deployments/
COPY --chown=1001 build/quarkus-app/app/ /deployments/app/
COPY --chown=1001 build/quarkus-app/quarkus/ /deployments/quarkus/
COPY --chown=1001 build/protoSync /deployments/proto/
COPY --chown=1001 build/launchScript /deployments/launch/

RUN mkdir -p /root/.config/gcloud/logs #&& chown -R 1001:1001 /root/.config/gcloud

RUN echo "mode=jvm" > /server-mode

EXPOSE 7117

# For now, we're going to run as root as gcloud doesn't blow up when we do.
# This seems to be related to either ssl ca certs (see above) or readonly gcloud config directories
#USER 1001

ENTRYPOINT [ "/deployments/launch/demo-start.sh" ]
#ENTRYPOINT [ "/deployments/run-java.sh" ]

