import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
}

evaluationDependsOn ':docker-server'

def dockerfileDir = project.layout.buildDirectory.dir('prepareDocker')
def imageIdFile = project.layout.buildDirectory.file('.docker/imageId.txt').get().asFile
def imageId = imageIdFile.exists() ? imageIdFile.text : null
def image = project.property('image') as String

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    it.from 'src/main/docker/Dockerfile'
    it.from('src/main/app.d') {
        into 'app.d'
    }
//    it.from(configurations.runtimeClasspath) {
//        into 'libs'
//    }
//    it.from(jar) {
//        into 'libs'
//    }
    it.into dockerfileDir
}

def buildImage = project.tasks.register('buildImage', DockerBuildImage) {
    // we'll make the default server type "-all-ai" in our deployDemo, deployMachine tasks.
    String serverType = findProperty("serverType") as String
    if (serverType == null) { // only replace null, empty -PserverType= is valid (base image only)
        logger.quiet("Using default serverType of all-ai (which is VERY large)")
        logger.quiet("Consider setting -PserverType= to empty string, or a single server-type")
        serverType = "-all-ai"
    } else if (!serverType.isEmpty()) {
        if (!serverType.startsWith('-')) {
            serverType = "-$serverType"
        }
        File serverDir = new File(project.rootDir, "docker/server/src/main")
        Collection validChoices = serverDir.listFiles().findResults { it.name.startsWith('server-') ? it.name.replace('server', '') : null}
        if (!validChoices.contains(serverType)) {
            logger.error("Invalid -PserverType={}", serverType)
            logger.error("Valid choices are {} or empty string", validChoices.join(", "))
            throw new GradleException("Illegal -PserverType=" + serverType)
        }
    }
    def grpcApiImage = project(':docker-server').tasks.findByName("buildDocker-server$serverType")
    it.dependsOn prepareDocker, grpcApiImage
    it.buildArgs.put("SERVER_TYPE", serverType)
    it.inputs.files grpcApiImage.outputs.files
    it.inputDir.set dockerfileDir
    it.imageIdFile.set imageIdFile
    it.images.add(image)
}

def deleteImage = project.tasks.register('deleteImage', DockerRemoveImage) {
    it.onlyIf { imageId != null }
    it.imageId.set imageId
    it.force.set true
    it.onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
    }
    it.doLast {
        imageIdFile.delete()
    }
}

project.tasks.register('cleanDocker') {
    it.dependsOn deleteImage
}

if (!System.getProperty('idea.jre.check')) {
    // only make assemble depend on our images when not running in intellij
    assemble.dependsOn buildImage
}
