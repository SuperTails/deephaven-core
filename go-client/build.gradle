import io.deephaven.tools.docker.DiffTask

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'io.deephaven.deephaven-in-docker'
}

//TODO produce a registryProject
//evaluationDependsOn Docker.registryProject('go')


// The Go convention is to check in generated sources - while there is a "central repo server" for Go, it is a proxy
// that merely polls each proxy several times an hour, but doesn't allow contents to be deployed to it. As such,
// any generated code must exist in git, and will be downloaded from there. As part of the build then, we generate and
// compare/overwrite protobuf sources.
configurations {
    go {}
}
dependencies {
    go project(path: ':proto:proto-backplane-grpc', configuration: 'go')
}
def compare = tasks.register('compareProtobuf', DiffTask) {
    expectedContents.set configurations.go
    actualContents.set layout.projectDirectory
    generateTask.set ':go-client:updateProtobuf'

    ignore {
        exclude 'internal/proto/**'
    }
}
// fail a "check" build if these are out of date
tasks.getByName('quick').dependsOn(compare)

def update = tasks.register('updateProtobuf', Sync) {
    finalizedBy compare
    from configurations.go
    into layout.projectDirectory
    preserve {
        exclude 'internal/proto/**'
    }
}


// start a grpc-api server
String randomSuffix = UUID.randomUUID().toString();
deephavenDocker {
    containerName.set "go-client-server-test-container-${randomSuffix}"
    networkName.set "go-client-test-network-${randomSuffix}"
}
// pass host/post to the golang test, as we do for python tests
//DH_PORT, DH_HOST
// go test -v ./...
def testGoClient = Docker.registerDockerTask(project, 'testGoClient') {
    copyIn {
        from(layout.projectDirectory) {
            include 'client/**'
            include 'internal/**'
            include 'go.mod'
            include 'go.sum'
        }
    }
    copyOut {}
    dockerfile {
        from('golang:1.18.1')
        copyFile('.', '/project')
        workingDir('/project')
        environmentVariable 'DH_HOST', deephavenDocker.containerName.get()
        environmentVariable 'DH_PORT', '8080'
    }
    network = deephavenDocker.networkName.get()
    containerDependencies.dependsOn = [deephavenDocker.healthyTask]
    containerDependencies.finalizedBy = deephavenDocker.endTask
    network = deephavenDocker.networkName.get()
    entrypoint = ['go', 'test', '-vet=all', '-v', './...']
}


// consider a smoke test of the main.go binary
